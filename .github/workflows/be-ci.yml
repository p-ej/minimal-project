name: Dockerizing to Amazon ECR  # 워크플로우의 이름을 'Dockerizing to Amazon ECR'로 설정합니다.
 
on:
  push:  # 특정 브랜치에 코드가 푸시될 때 워크플로우가 트리거됩니다.
    branches: ["master"]  # 'main' 브랜치에 푸시될 때만 워크플로우 실행
  pull_request:  # 풀 리퀘스트가 열리거나 업데이트될 때 트리거됩니다.
    branches: ["master"]  # 'main' 브랜치에 대한 풀 리퀘스트일 때만 실행
 
env:  # 공통 환경 변수를 설정합니다.
  AWS_REGION: ap-northeast-2  # AWS 리전을 서울 리전으로 설정
  ECR_REPOSITORY: minimal-project  # ECR 저장소 이름을 'minimal-project'로 설정
  IMAGE_TAG: ${{ github.sha }}
  ECS_CLUSTER: cluster-nestjs-second                       # <- 실제 값으로
  ECS_SERVICE: role-nestjs-second-service-d85kzfam         # <- 실제 값으로

 
jobs:  # 실행할 작업을 정의합니다.
  deploy:  # 'deploy'라는 작업을 정의합니다.
    name: Deploy  # 작업의 이름을 'Deploy'로 설정
    runs-on: ubuntu-latest  # 최신 Ubuntu 버전에서 실행되도록 설정
    environment: production  # 이 작업이 'production' 환경에서 실행됨을 정의
 
    steps:  # 이 작업에서 실행될 단계들을 정의합니다.
      - name: Checkout  # 소스 코드를 체크아웃하는 단계
        uses: actions/checkout@v4  # GitHub 제공 체크아웃 액션 사용
 
      - name: Config AWS credentials  # AWS 자격 증명을 구성하는 단계
        uses: aws-actions/configure-aws-credentials@v2  # AWS 자격 증명 구성 액션 사용
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub Secrets에 저장된 AWS 액세스 키 ID 사용
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # GitHub Secrets에 저장된 AWS 시크릿 액세스 키 사용
          aws-region: ${{ env.AWS_REGION }}  # 위에서 정의한 AWS 리전 사용
 
      - name: Login To Amazon ECR  # Amazon ECR에 로그인하는 단계
        id: login-ecr  # 이 단계의 ID를 'login-ecr'로 설정 (후속 단계에서 참조 가능)
        uses: aws-actions/amazon-ecr-login@v2  # Amazon ECR 로그인 액션 사용
 
      - name: Build, tag, and push image to Amazon ECR  # Docker 이미지를 빌드, 태그, ECR에 푸시하는 단계
        id: build-image  # 이 단계의 ID를 'build-image'로 설정
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # ECR 레지스트리 URL 설정
          IMAGE_TAG: ${{ github.sha }}  # GitHub의 커밋 SHA 값을 이미지 태그로 사용
        run: |
          IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}
          docker build -t ${IMAGE_URI} -f Dockerfile .
          docker push ${IMAGE_URI}
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
        
       # 여기서 새 이미지 URI를 태스크 정의에 주입
      - name: Render task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: app
          image: ${{ env.IMAGE_URI }}

      # 그리고 ECS 서비스에 새 태스크 정의로 배포
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
